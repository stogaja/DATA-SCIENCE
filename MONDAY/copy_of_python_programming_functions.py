# -*- coding: utf-8 -*-
"""Copy of Python Programming: Functions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eiEQ95--m-wf7K-s_gizx_W8zs5zbY93

<font color="green">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>

# Python Programming: Functions

## 1.0 Overview
"""

# Example 1
# Below is an example of a function - my_function.
#

# This function is called my_function and contains only one line of code
# tasked with printing.

# We define our function as shown;
# Def is the keyword used to define the function, my_function is the name of our function
# and print() is the operation that the function undertakes;
def my_function():
    print("Hello, This is from my function!")

# Upon defining the function, we can then call it as shown below. Calling a function means executing a function and printing its value.
# Please take note of the parenthesis at the end, if you omit the parenthesis then the function will not display the output.
my_function()

# Example 2
# Let's briefly look at built-in functions. Built-in functions are function that are already predetermined in python. 
# This means that these functions are always available for use without us having to define them.
# Below is is an example of a built in function.

# what we've done in the line below is to call the print function and passed a string Hello!. 
# We will learn more about passing to functions later in this session.
print("Hello!")

# print() is the built - in function. 
# Examples of other built - in python functions include range(), str(), max(), min() etc.

# Example 3
# We can also use a function to perform a custom complex mathematical operation
# just as shown in the newtons_method function. 
# Bear with us for now, you do not necessarily need to understand what the newtons method
# which is the complex mathematical operation entails. 
# What you need to know for know isthat functions are used to perform a specific
# set of operations then return an output as shown below. 
#


def newtons_method(num, estimate):
    # Computing a new_estimate
    new_estimate = (estimate + num / estimate) / 2
    print(new_estimate)
    # Base Case: Comparing our estimate with built-in functions value
    if new_estimate == math.sqrt(num):
        return True
    else:
        # let's return our output.
        return newtons_method(num, new_estimate)
      
# As we have noticed, we defined our fuction - newtons_method, then passed num and estimate 
# to the function. These values that we have passed are referred to as parameters. 
# Values can be passed to functions, then the functions perform a set of operations 
# and provide an output based on the given input. 
# More about parameters will be covered later in this session.

"""## 1.1 Using Built-in Functions """

# Example 1
# Let's now see how to work with a few built-in python functions
# We will start learning about the max() built-in function
# 

# The max() function will return the item with the highest value as shown
# in the given arrays 
x = max([15, 20, 43, 33, 43])
print(x)

# Using the max() function, we can return the items with the highest value alphabetically
y = max(["Alice", "James", "Valerie"])
print(y)

# Example 2
# Another built-in function that we can use is the type() function.
# Let's use it to return the data type of the specified object. 
#
w = 12.2
x = 100
y = ['Samsung', 'Sony', 'Panasonic']
z = "Upendo"

print(type(w))

# Find out the type of x
print(type(x))

# Find out the type of y
print(type(y))

# Find out the type of z
print(type(z))

# Example 3
# This is how we can also use the built in sum() function
# 

a = [232, 323, 434, 523, 323, 232] 
print(sum(a))

# As we have already mentioned, examples of other built - in python functions 
# include range(), str(), max(), min() etc.

"""### <font color="green">1.1 Challenges</font>"""

# Challenge 1
# Now that we have learnt to use some built-in functions, 
# Let's use the min() function to return the item with the lowest value below
#
a = [232, 323, 434, 523, 323, 232] 
print(min(a))

# Challenge 2
# Let's also round off the number 23.43 using the round() function
#
print(round(24.43))

# Challenge 3
# Lastly, let's give an example where the sorted() function can be used;
# Hint: Feel free to perform some external research 
# 

a = (4, 6, 7, 67, 35, 56, 99, 34, 192, 40)
x = sorted(a)
print(x)

"""## 1.2 Creating a Function

We will now create functions. 

Below are steps that we can use to create a function: 

*  **Step 1**: We first declare the function with the keyword `def` followed by the function name and brackets.
*   **Step 2**: Add the program statements to be executed.
*   **Step 3** End the function with/without return statement.
*  **Step 4**: We will learn more about this step later in this session. If our function takes parameters, we write the arguments inside the opening and closing parentheses of the function, and end the declaration with a colon.
"""

# Example 1
# To start, we will create a function to find out which 
# of two numbers is greater than the other 
# 

# we define it by giving it the name max_of_two
def max_of_two():
  
  # we then define our variables that will contain the numbers to be manipulated
  first_number  = 10
  second_number = 5
  
  # then we perform our operations i.e. in this case,
  # if first_number is greater than second_number etc.
  if first_number > second_number:
    
      # the return keyword allows us to provide back the result/output of our function
    return first_number
  else:
    # the return key word allows us to provide back the result/output of our function
    return second_number
 
# Lastly, we do the most important step; which is to call the function that 
# we have just created above. Calling allows us to use the function. 
# We have also been calling our built-in functions from the previous section.
#
max_of_two()

# Example 2
# Let's now create another function to find out the square of a certain number 
# 

# defining our function name
def square_of_number():
  
  # assigning 6 to our variable nuber 
  number = 6
  

  square_square_of_number = number ** 2
  
  # the return keyword allows us to provide back the result/output of our function
  return square_square_of_number

# now calling our function
square_of_number()

# Example 3
# Lastly, we create another function to sum all the numbers in a list a = [6, 5, 4, 3, 2, 1]
# 

def sum():
  a = [6, 5, 4, 3, 2, 1]
  total = 0
  
    # performing our operation by using a for loop to iterate through our list
  for x in a:
    
    # for each iteration we perform total = total + 1;  which can be simply be written as shown below
    total += x
    
  # Then lastly return our output which is to print out the value of the total variable 
  return print(total)

# Lastly we call the function in order to use it
sum()

"""### <font color="green">1.2 Challenges</font>"""

# Challenge 1
# Now that we have seen how to create functions, 
# let's create one that returns the maximum of two numbers;
#

def max_number():

  number1 = int(input("Enter the first number"))
  number2 = int(input("Enter the second number"))

  if number1 > number2:
    print("{0} is greater".format(number1))
  else:
    return number2
  
max_number()

# Challenge 2
# Let's write another function that tell us whether if a variable is between 3 and 10
#
def range_var():
  
  var = int(input("Enter the variable"))

  if var > 3 and var < 10:
    print(True)
  else:
    return var
range_var()

# Challenge 3
# Lastly, an online retailer provides express shipping for many of its items at a
# rate of Ksh 200 for the first item, and Ksh. 25 for each subsequent item. 
# Write a function that takes the number of items in the order from the user. 
# Return the shipping charge for the order as the functionâ€™s result. 
#

def charge():
  qty = int(input("Enter the number of items you have ordered: "))

  if qty > 1:  
    shipping = ((qty-1)*25)+200
  elif qty == 1:
    shipping = 200
  elif qty < 1:
    print("Sorry!! Please enter a valid number of items ordered.")

  return shipping
charge()

"""## 1.3 Passing Parameters and Returning Values"""

# Example 1
# Parameters are variables that give to a function. The function later use the values 
# of those parameters which we call arguments to perform operations then return an output.
# The ability for functions to take in parameter is important because it allows 
# for code re-use in different contexts. 
# To see this, let's create a function that finds the average of two numbers a and b.
# These numbers a and b are referred to as parameters and their values are referred to arguements.
# The parameters will be provided to the function and the function will 
# perform the average and return the result of these operations as show.
# 

# Defining our function
def avg(a,b):
  
  # Performing the operation
  two_numbers_avg = (a + b)/2
  
  # Returning the result of our function
  return print(two_numbers_avg) 

# Calling our function with arguments
avg(2,4)

# Example 2
# Let's create another function that takes in the name and age of a person
# then prints out their name 
# 

def lastFirst(firstName, lastName):
    separator = ', '
    result = lastName + separator + firstName
    return print(result)
 
lastFirst('Tomanzi', 'Chitanda')

# Example 3
# Let's create another function that calculates the area of a cirlce when
# the value radius is passed to the function
# 

def circleArea(radius):
    area = 3.14 * radius * radius 
    return print(area)
  
# Calling our function and passing an argumement
circleArea(4)

"""### <font color="green">1.3 Challenges</font>"""

# Challenge 1
# Write a function that determines how many days there are in a particular month. 
# Your function will have two parameters: The month as an integer between 1 and 12, 
# and the year as a four digit integer. 
# Ensure that your function reports the correct number of days in February for leap years.
# 
def days():
  month = 0
  year = 0

#checking if the month is between 1 and 12
  while month < 1 or month > 12:
    month = int(input("Enter a month value between 1 and 12"))
    if month < 1 or month > 12:
      print("Sorry! Enter a month value between 1 and 12")
#checking validity of year between 1000 and 9999
  while year < 1000 or year > 9999:
    year = int(input("Enter a year value between 1000 and 9999"))
    if year < 1000 or year > 9999:
      print("Sorry! Enter a year value between 10000 and 9999")
#code that returns the number of days in a month
  if month == 1:
    print("Month {0} has 31 days".format(month))
  elif month == 2:
#checking for leap year
    if year % 4 == 0:
      print("Month {0} has 28 days".format(month))
    else:
      print("Month {0} has 29 days".format(month))
  elif month == 3:
    print("Month {0} has 31 days".format(month))
  elif month == 4:
    print("Month {0} has 30 days".format(month))
  elif month == 5:
    print("Month {0} has 31 days".format(month))
  elif month == 6:
    print("Month {0} has 30 days".format(month))
  elif month == 7:
    print("Month {0} has 31 days".format(month))
  elif month == 8:
    print("Month {0} has 31 days".format(month))
  elif month == 9:
    print("Month {0} has 30 days".format(month))
  elif month == 10:
    print("Month {0} has 31 days".format(month))
  elif month == 11:
    print("Month {0} has 30 days".format(month))
  elif month == 12:
    print("Month {0} has 31 days".format(month))

#call our initial function
days()

# Challenge 2
# In a particular company, taxi fares consist of a base fare of Ksh.200, 
# plus Ksh.25 for every 140 meters traveled. 
# Write a function that takes the distance traveled (in kilometers) 
# as its only parameter and returns the total fare as its only result.
#
def fare(distance):
  cost = ((distance/140)*25)+200
  return print("{0} shillings".format(cost))
fare(700)

# Challenge 3
# A particular cell phone plan includes 20 minutes of air time and 20 text messages 
# for Ksh. 50.00 a month. Each additional minute of air time costs Ksh. 3.00, 
# while additional text messages cost Ksh. 2.00 each. 
# The entire bill (including the 999 charge) is subject to 16 percent VAT tax.
# Write a program that reads the number of minutes and text messages used in a month from the user. 
# Display the base charge, additional minutes charge (if any), 
# additional text message charge (if any), tax and total bill amount. 
# Only display the additional minute and text message charges if the user incurred costs in these categories. 
# Ensure that all of the charges are displayed using 2 decimal places.
#
def total_bill():
  air_time = int(input("Enter number of minutes: "))
  text_messages = int(input("Enter the number of text messages: "))
  base_charge = 50
  if ((air_time <= 20) and (text_messages <= 20)):
    vat = 0.16 * base_charge
    total_charges = vat + base_charge
    print("The base charge is {0:.2f}".format(base_charge))
    print("The VAT is {0:.2f}".format(vat))
    print("The total charge is {0:.2f}".format(total_charges))
  elif((air_time > 20) and (text_messages > 20)):
    extra_airtime_amount= ((air_time - 20) * 3)
    extra_textmessages_amount = ((text_messages - 20) * 2)
    total_airtime_amount = base_charge + extra_airtime_amount
    total_textmessages_amount = base_charge + extra_textmessages_amount
    vat_airtime_amount = 0.16 * total_airtime_amount
    vat_textmessages_amount = 0.16 * total_textmessages_amount
    total_airtime_charges_amount = vat_airtime_amount + total_airtime_amount
    total_textmessages_charges_amount = vat_airtime_amount + total_textmessages_amount
    grand_total = total_airtime_charges_amount +  total_textmessages_charges_amount
    print("The base charge is {0:.2f}".format(base_charge)) 
    print("The extra text message charge is {0:.2f}".format(extra_textmessages_amount))
    print("The extra airtime charge is {0:.2f}".format(extra_airtime_amount))
    print("The VAT on airtime is {0:.2f}".format(vat_airtime_amount))
    print("The VAT on text messages is {0:.2f}".format(vat_textmessages_amount))
    print("The total charge of airtime is {0:.2f}".format(total_airtime_charges_amount))
    print("The total charge of text messages is {0:.2f}".format(total_textmessages_charges_amount))
    print("The grand total is {0:.2f}".format(grand_total))
  elif(air_time > 20):
    extra_airtime = ((air_time - 20) * 3)
    total_airtime = base_charge + extra_airtime
    vat_airtime = 0.16 * total_airtime
    total_airtime_charges = vat_airtime + total_airtime
    print("The base charge is {0:.2f}".format(base_charge))
    print("The extra airtime charge is {0:.2f}".format(extra_airtime)) 
    print("The VAT is {0:.2f}".format(vat_airtime))
    print("The total charge is {0:.2f}".format(total_airtime_charges))
  else:
    (text_messages > 20)
    extra_textmessages = ((text_messages - 20) * 2)
    total_textmessages = base_charge + extra_textmessages
    vat_textmessages = 0.16 * total_textmessages
    total_textmessages_charges = vat_textmessages + total_textmessages
    print("The base charge is {0:.2f}".format(base_charge))
    print("The extra text message charge is {0:.2f}".format(extra_textmessages))
    print("The VAT is {0:.2f}".format(vat_textmessages))
    print("The total charge is {0:.2f}".format(total_textmessages_charges))  
total_bill()