# -*- coding: utf-8 -*-
"""Pandas Basics

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MwB9icvcIq4BLO-8L9gvvbCtb-DC6Z69

<font color="green">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>

# Pandas Basics

## 1.0 Importing Pandas Library
"""

# Let's import the pandas library just like we did with Numpy
# 
import pandas as pd

"""## 1.1 Performing Basic Operations"""

# Example 1
# Pandas is built on the NUmpy package.
# It's main data structure is called DataFrame. Dataframes allows us to store and 
# manipulate data in row and column observations


# In this section, we will cover some of the basic operations 
# that we perform while using pandas.
# The first thing we will do is to create a Dataframe from a dictionary as shown below;
# Think of a Dataframe as a table. By definition, a DataFrame is a 2-dimensional labeled
#  data structure 
# with columns of potentially different types.
# 
data = [{'name': 'vikash', 'age': 27}, {'name': 'Satyam', 'age': 14}]
df = pd.DataFrame.from_dict(data, orient='columns')
df

# Something to note in the results is that everytime you create a dataframe it will
#  automatically assign indexes to the row.

# Example 2
# We can also create a Dataframe by inserting rows iteratively
# 

# For this example, we will use the randint() function 
# thus we will need to import it
from random import randint

# We will also need to declare the columns that we will need 
columns = ['a', 'b', 'c']

# Then creating our dataframe
df = pd.DataFrame(columns=columns)

# lastly append random values to the dataframe iteratively using a for loop.
# We are going to use two for loops. the first one will be for the number of rows and the second one will be for the number of columns.
# In the outer loop, we will create a range of number from 0-5, then iterate through it. This means that we will have 6 rows
# We'll explain the logic of this code from the inside out. 
# So inside the inner loop, we  aim to populate our dataframe with random integers that are between -1 and 1.
# Hence everytime we generate out random number, we use pandas dataframe method called loc[] to insert the random number in either of the three columns
# The .loc method works in the same way slicing works in python list. This means that it can be used to access elements inside a dataframe. As such, we can also use it to update elements in a dataframe. When we created the  empty dataframe earlier, it meant that the elements were null. So in our code we are simply updating the null elements with values.
# The logic for this code can be alittle bit confusing at first, so spend a little bit of time with your pair trying understand how the code works as it will help you alot in the future.
for i in range(7): #6 rows
    for c in columns:
      df.loc[i,c] = randint(-1,1)
  
# and printing out the dataframe
df

# Example 3
# Creating a Dataframe with randomly generated data
# 

# We will import and use numpy in this example
import numpy as np

np_mat = np.random.randint(0,5,size=(5, 4))

np_mat

# Uncomment the following lines after running the previous lines 
# df = pd.DataFrame(np_mat, columns=list('ABCD'))
# df

# Example 4
# Creating a Dataframe from a csv file 
# 
df = pd.read_csv('sample_data/california_housing_test.csv', delimiter = ',')
df

# Uncomment the following lines after running the previous lines
# df_url = "https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"
# df = pd.read_csv(df_url)
# df

# Example 5
# Changing Dataframe column names 
# 
df_list = [['AA', 1, 'a'],['BB', 2, 'a'],['CC', 3, 'a']]

df = pd.DataFrame(df_list, columns = ['name','value','salue'])
# df

# Uncomment the following lines after running this cell once
# df.columns.values[1:] = ['prefix_' + val for val in df.columns.values[1:]]
# df.columns.values
# df

# Example 6
# A simpler way of changing Dataframe column names 
#
df_list = [['AA', "temp", 1],['BB', "temp", 2],['CC', "temp", 3]]
df = pd.DataFrame(df_list, columns = ['name','temp', 'value'])
df

# Uncomment the following line
# df.columns = ['names', 'temperature', 'values']
# df

# Example 7
# Choosing specific columns from a DataFrame
# 
df_list = [['AA', "temp", 1],['BB', "temp", 2],['CC', "temp", 3]]
df = pd.DataFrame(df_list, columns = ['name','temp', 'value'])
df

# Uncomment the following lines after running 
# df = df[["name","temp"]]
# df

# Example 8
# Deleting/dropping columns or extracting columns from Dataframe 
# 
df_list = [['AA', "temp", 1],['BB', "temp", 2],['CC', "temp", 3]]
df = pd.DataFrame(df_list, columns = ['name','value','temp'])
df

# Uncomment the following lines
# df.drop('value', axis=1, inplace=True)
# df

# Uncomment the following lines after running the previous commented lines
# df = pd.DataFrame([['AA', 1],['BB', 2],['CC', 3]], columns = ['name','value'])
# df

# Uncomment the following lines after running the previous commented lines
# values = df.pop('value')
# df

# Uncomment the line below after running the previous commented lines
# values

"""### <font color="green">1.1 Challenges</font>"""

# Challenge 1
# Create a Dataframe from the following dictionary 
# 
studentData = {
    'name' : ['jack', 'Riti', 'Aadi'],
    'age' : [34, 30, 16],
    'city' : ['Sydney', 'Delhi', 'New york']
}

OUR CODE GOES HERE

# Challenge 2
# Create the Dataframe shown below in the Expected Output by inserting rows iteratively
# 
OUR CODE GOES HERE

# Challenge 2: Expected Output
# [Do not run this cell]
# Running this cell will clear the output

# Challenge 3
# Create the Dataframe shown in the Expected Output below with randomly generated integers
# 
OUR CODE GOES HERE

# Challenge 3: Expected Output
# Running this cell will clear the output
# Attention: Do not run this cell!

# Challenge 4
# Create a Dataframe from the mnist_test csv file in the sample_data directory
#
OUR CODE GOES HERE

# Challenge 5
# Create a Dataframe from dataset with the following url source
# URL: http://bit.ly/NairobiBusesDataset
#
OUR CODE GOES HERE

# Challenge 6
# Change the column names of the dataset from this source (http://bit.ly/FiveYearData) 
# to: country, year, population, continent, life_exp, gdp_per_cap
#
OUR CODE GOES HERE

# Challenge 7
# Choose the country, year and continent columns from a DataFrame in challenge 6
#
OUR CODE GOES HERE

# Challenge 8
# Drop the population and life_exp columns from the DataFrame in challenge 6
#
OUR CODE GOES HERE

"""## 1.2 Manipulating Dataframes"""

# Example 1
# While working with dataframes, sometimes we may want to iterate over our dataframe and do sopme operations on each row. Pandas gives us two methods to enable us to do this.
# We are going to look at them in the following example.
# 

df = pd.DataFrame([['AA', 1],['BB', 2],['CC', 3]], columns = ['name','value'])
df

# Uncomment after running previous lines
# Since we are iterating over rows, we are going to use a pandas method called iterrows(). This method returns an iterator that contains indices of each row and data on each row. Each row is stored in a Series
# for index, row in df.iterrows():
#    print(row['name'], row['value'])


# Uncomment after runnuni previous lines
# The other method we that is available to us is itertuples() method. This method loops through each row and returns a named tuple.
# for row in df.itertuples():
#   print(row)

# Example 2
# Applying a function to Dataframe row
# This is useful when cleaning up data - converting formats, altering values etc.
#  In this example we are going to create a third column then create a function that concatenates the values of the first and second column.
df = pd.DataFrame([['AA', 1],['BB', 2],['CC', 3]], columns = ['name','value'])
df

# Uncomment after running previous lines

# Define a function that takes in two values and returns the two values concatenated together
# def function_1(val_1, val_2):
#   # before retuning the values, we convert the first values into a string because values in one column are strings
#     return val_1 + str(val_2)

# Create a third column called col_a then apply a function that we defined above using python lambda.
# Since lambda is a new concept, take a few minutes to read about it here: https://www.afternerd.com/blog/python-lambdas/ . Its not a difficult concept to grasp, so it should not take alot of time to understand.
# df['col_a'] = df.apply(lambda row: function_1(row['name'], row['value']), axis=1)
# df

# Uncomment after running previous lines
# We create a new function that takes in a row value and multiplies it by 2
# def function_2(row):
#     return row['value'] * 2

# Create another column called col_b, that applies the above function and populates the column with our new values
# df['col_b'] = df.apply(lambda row: function_2(row), axis=1)
# df

# Example 3
# Applying a function to a specific column of Dataframe
# 
df = pd.DataFrame([['AA', 1], ['BB', 2], ['CC', 3]], columns=['name', 'value'])
df

# Uncomment after running previous lines
# def function_1(val_1):
#     return "prefix_" + str(val_1)
  
# Uncomment after running previous lines
# To be able to apply a function to the elements of the name column, we use the map function. This function allows us to apply a specific function to all the elements of the targeted column.
# df['name'] = df['name'].map(function_1)
# df

# Example 4
# Finding and replacing a value in Dataframe
# 
df = pd.DataFrame([['One', 'Two'], ['Four', 'Abcd'], ['One', 'Bcd'], ['Five', 'Cd']], columns=['A', 'B'])
df

# Uncomment after running previous lines
# df.loc[df['A'] == 'One', 'A'] = 0
# df

"""### <font color="green">1.2 Challenges</font>"""

# Challenge 1
# Create a Dataframe from the Dictionary below and iterate over the rows
graduates = {'name':["Jane Njoroge", "June Adhiambo", "Kevin Swale", "Heidi Sang"], 
        'degree': ["MBA", "BCA", "M.Tech", "MBA"], 
        'score':[90, 40, 80, 98]} 

OUR CODE GOES HERE

# Challenge 2
# Apply the given function to SAL-RATE column
# http://bit.ly/EmployeeSalary

# Get rid of $ and , in the SAL-RATE, then convert it to a float
def money_to_float(money_str):
    return float(money_str.replace("$","").replace(",",""))

OUR CODE GOES HERE

# Challenge 3
# Replace the value in M.Tech in Challenge 1 Dataframe with Msc.Tech
# 
OUR CODE GOES HERE

"""## 1.3 Splitting and Merging Dataframes

"""

# Example 1
# Merging Dataframes by columns using join
# Create the first dataframe
df = pd.DataFrame([[1, 3], [2, 4]], columns=['A', 'B'])
df

# Uncomment and run after running previous lines
# Create the second dataframe
# df2 = pd.DataFrame([[1, 5], [1, 6]], columns=['A', 'C'])
# df2

# Uncomment and run after running previous lines
# df.merge(df2, how='left', on='A')  # merges on columns A

# Uncomment and run after running previous lines
# df2.drop_duplicates(subset=['A'], inplace=True)

# Uncomment and run after running previous lines
# df.merge(df2, how='left', on='A')

# Example 2
# Merging Dataframes by columns on index
# 
df = pd.DataFrame([[1, 3], [2, 4]], columns=['A', 'B'])
df

# Uncomment and run after running previous lines
# df2 = pd.DataFrame([[1, 5], [1, 6]], columns=['A', 'D'])
# df2

# Uncomment and run after running previous lines
# pd.concat([df, df2], axis=1)

# Example 3
# Merging Dataframes and splitting again 
# 
ts1 = [1,2,3,4]
ts2 = [6,7,8,9]
d = {'col_1': ts1, 'col_2': ts2}
d

# Uncomment and run after running previous lines
# df_1 = pd.DataFrame(data=d)
# df_1

# Uncomment and run after running previous lines
# df_2 = pd.DataFrame(np.random.randn(3, 2), columns=['col_1', 'col_2'])
# df_2

# Uncomment and run after running previous lines
# df_all = pd.concat((df_1, df_2), axis=0, ignore_index=True)
# df_all

# Uncomment and run after running previous lines
# print(df_1.shape)
# print(df_2.shape)
# print(df_all.shape)

# Uncomment and run after running previous lines
# print(df_1.shape)
# print(df_2.shape)
# print(df_all.shape)

# Uncomment and run after running previous lines
# print(df_train.shape)
# print(df_test.shape)
# print(df_all.shape)

# Example 4
# Grouping by a Dataframe and iterating over grouped series
# 
classes = ["class 1"] * 5 + ["class 2"] * 5
sub_class = ['c1','c2','c2','c1','c3'] + ['c1','c2','c3','c2','c3']
vals = [1,3,5,1,3] + [2,6,7,5,2]
p_df = pd.DataFrame({"class": classes, "sub_class": sub_class, "vals": vals})
p_df

# Uncomment and run after running previous lines
# grouped = p_df.groupby(['class', 'sub_class'])['vals'].median()
# grouped

# Uncomment and run after running previous lines
# for index_val, value in grouped.iteritems():
#     class_name, sub_class_name = index_val
#     print(class_name, ":", sub_class_name, ":", value)

"""### <font color="green">1.3 Challenges</font>"""

# Challenge 1
# Create the Dataframes from the given Dictionaries below and then merge them 
#
dt1 = {
        'subject_id': ['1', '2', '3', '4', '5'],
        'first_name': ['Fridah', 'Kwasi', 'Victor', 'Alice', 'Audrey'], 
        'last_name': ['Njeri', 'Adi Dako', 'Oliech', 'Tergat', 'Cheng']}

dt2 = {
        'subject_id': ['4', '5', '6', '7', '8'],
        'first_name': ['Michael', 'Judy', 'Lenny', 'Mohammed', 'Betty'], 
        'last_name': ['Macharia', 'Waithera', 'Baraza', 'Ali', 'Kyalo']}

OUR CODE GOES HERE

# Challenge 2
# Using dt1 and dt2 dictionaries from Challenge 1, create another Dataframe from
# the dt3 Dictionary below. Then merge all of them along the subject_id value
# i.e. Columns from left; subject_id, first_name, last_name, test_id
dt3 = {
        'subject_id': ['1', '2', '3', '4', '5', '7', '8', '9', '10', '11'],
        'test_id': [51, 15, 15, 61, 16, 14, 15, 1, 61, 16]}

OUR CODE GOES HERE

# Challenge 3
# Create dataframes using dt1 and dt2 from Challenge 1 then merge based on indexes
# 
OUR CODE GOES HERE

# Challenge 4
# Create a dataframe from the following url (http://bit.ly/MDSTelecomData), then 
# and determine the sum of the durations per month of calls, sms and data entries.
# Hint: Use groupby i.e. month, duration
#
OUR CODE GOES HERE

"""## 1.4 Converting Columns"""

# Example 1
# 
# Converting categorical columns to integer columns using label encoding method
# so as to prepare to use categorical data in analysis. 
# For this example, we'll use a new Python library called sklearn(sci-kit learn). Sklearn is machine learning library for python that is used in data mining and data anlysis. 
# As we progress in our data science journey we'll learn more about it's capabilities. You will use this throughout module 1 and 2 of core as well, and in many future projects.
# From this library we are importing a method called LabelEncoder that will help us in converting categorical data into integers
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

# Scenario 1
df = pd.DataFrame({'col_1': [1, 0, 1, 2], 
                   'col_2': [1.2, 3.1, 4.4, 5.5], 
                   'col_3': [1, 2, 3, 4], 
                   'col_4': ['a', 'b', 'c', 'd']})
df
# Some of the models that you will learn about in the future only deal with numbers, particularly integers
# First, we will convert col_4 to be in integer column, and the value within it to be integers as well.
# df.info()

# This will study the column, figure out the unique categories, and assign an integer value to each starting from 0
# This is internal to the label_encoder, it doesn't change the dataframe yet
# label_encoder.fit(df['col_4'])

# View the labels in the column
# list(label_encoder.classes_)

# This is how you transform the categories into intergers
# df['col_4'] = label_encoder.transform(df['col_4'])

# df
# df.info()

# Uncomment after running previous lines
# Slightly different scenario: repeated categories : ['a', 'b', 'b', 'a']. In this scenario, we will have duplicates in our categories
# df2 = pd.DataFrame({'col_1': [1, 0, 1, 2], 
#                    'col_2': [1.2, 3.1, 4.4, 5.5], 
#                    'col_3': [1, 2, 3, 4], 
#                    'col_4': ['a', 'b', 'b', 'a']})
# df2

# # Fitting the label encoder method in the column
# label_encoder.fit(df2['col_4'])

# # Converting the categories into integers
# df2['col_4'] = label_encoder.transform(df2['col_4'])
# # view the dataframe with the converted column
# df2
# df2.info()

# Example 2
# Reducing high dimensionality from categorical column
# We will learn more about the topic of Dimension reduction in Core
# More info: 
# 1) http://bit.ly/DimensionReductionExample
# 2) http://bit.ly/DimensionReductionProblem
#
df = pd.DataFrame({'groups': ['group 1','group 2','group 1','group 2','group 3','group 4','group 5','group 1','group 2','group 5'], 
                   'vals': [1,2,3,4,5,6,7,8,9,10]})
df

# Uncomment after running previous lines
# df['groups'].value_counts()

# Uncomment after running previous lines
# high_dim_columns = ['groups']

# Uncomment after running previous lines
# for column in high_dim_columns:
#    a = pd.DataFrame(df[column].value_counts() <= 2)
#    unique_values = a.index[a[column]].values
#    df.loc[df[column].isin(unique_values), column] = 'other'
# df

# Example 3
# Converting categorical column to one hot encoded column 
# More information on hot encoding: http://bit.ly/HotEncoding
# 
df = pd.DataFrame({'sex': ['M', 'F', 'M', 'F'], 
                   'col_2': [1.2, 3.1, 4.4, 5.5], 
                   'col_3': [1, 2, 3, 4], 
                   'col_4': ['a', 'b', 'c', 'd']})
df

# Uncomment after running previous lines
# categorical_variables = ['sex']

# Uncomment after running previous lines
# for variable in categorical_variables:
#    df[variable].fillna("Missing", inplace=True) # Fill missing data with the word "Missing"
#    dummies = pd.get_dummies(df[variable], prefix=variable) # Create array of dummies
#    df = pd.concat([df, dummies], axis=1) # Update dataframe to include dummies and drop the main variable
#    df.drop([variable], axis=1, inplace=True) 
# df

"""### <font color="green">1.4 Challenges</font>"""

# Challenge 1
# Create a dataframe from the given dictionary below then
# Convert the categorical column to an integer column
# 
dt1 = {'patient': [1, 1, 1, 2, 2], 
        'obs': [1, 2, 3, 1, 2], 
        'diagnosis': [0, 1, 0, 1, 0],
        'score': ['weak', 'strong', 'normal', 'weak', 'normal']}

OUR CODE GOES HERE

# Challenge 2
# Convert the categorical column to one hot encoded column
# in the following list
# 
list1 = [["Nairobi", "range", 3000], ["Mombasa", "tuktuk", 4000], ["Nakuru", "tuktuk", 1000]]

OUR CODE GOES HERE

"""## 1.5 Splitting Columns

"""

# Example 1
# Splitting a column using a delimiter
# 
data = [{'test': 'vikash|Arpit', 'val': 6},
        {'test': 'vikash_1|arpit|Vinayp', 'val': 3},
        {'test': 'arpit|vinayp', 'val': 2}]
df = pd.DataFrame.from_dict(data, orient='columns')
df

# Uncomment after running previous lines
# df['test'].apply(lambda x: pd.Series([i for i in reversed(x.lower().split('|'))]))

# Example 2
# Splitting a column using delimiter and one hot encode the values 
# 
data = [{'test': 'vikash|Arpit', 'val': 6},
        {'test': 'vikash_1|arpit|Vinayp', 'val': 3},
        {'test': 'arpit|vinayp', 'val': 2}]

df = pd.DataFrame.from_dict(data, orient='columns')
df

# Uncomment after running previous lines
# chosen_columns = set()
# for idx, row in df.iterrows():
#     for val in str(row['test']).lower().split('|'):
#         chosen_columns.add(val.strip())

# Uncomment after running previous lines
# chosen_columns_list = list(chosen_columns)

# Uncomment after running previous lines
# chosen_columns_list.sort(key=len, reverse=True) 
# chosen_columns_list


# def get_one_hot_encoded_column(col_value):
#     col_value = col_value.lower()
#     new_col_value = ''
#     for val in chosen_columns_list:
#         if val in col_value.split('|'):
#             col_value = col_value.replace(val, '')
#             new_col_value += '1,'
#         else:
#             new_col_value += '0,'
#     return new_col_value[:-1]

# Uncomment after running previous lines
# df['test_new'] = df['test'].map(get_one_hot_encoded_column)
# df

# Uncomment after running previous lines
# df2 = df['test_new'].apply(lambda x: pd.Series([i for i in x.lower().split(',')]))
# df2

# Uncomment after running previous lines
# df2.columns = chosen_columns_list
# df2

# Uncomment after running previous lines
# df2.info()

# Uncomment after running previous lines
# df2 = df2.apply(pd.to_numeric)

# Uncomment after running previous lines
# df2.info()

# Uncomment after running previous lines
# df_new = pd.concat([df, df2], axis=1)

# Uncomment after running previous lines
# df_new.drop(['test', 'test_new'], inplace=True, axis=1)
# df_new

"""### <font color="green">1.5 Challenges</font>"""

# Challenge 1
# Split the following dataframe into multiple rows
#
df = pd.DataFrame({
   'EmployeeId': ['123', '124', '125', '126', '126'],
   'City': ['Nairobi|Mombasa', 'Nakuru|Nairobi|Kisumu', 'Nairobi|Mombasa', 'Nairobi|Nakuru', 'Mombasa'] 
})

OUR CODE GOES HERE

# Challenge 2
# Split the following dataframe 
# 

list_1 = [1,2,3,4,5]
list_2 = [2,4,6,8,10]
list_3 = ['one','two,three,four','three,four,five','four,five','five']

df = pd.DataFrame({'A' : list_1, 'B' : list_2, 'C' : list_3})

OUR CODE GOES HERE